import { useState, useEffect } from 'react'
import { useProducts } from '../hooks/useProducts'
import { useOrders } from '../hooks/useOrders'
import { useSettings } from '../hooks/useSettings'
import { sendNotification } from '../services/supabase'
import { isAdmin, getTelegramUser } from '../services/supabase'
import { getTranslation } from '../utils/translations'
import { EditIcon, DeleteIcon } from '../components/icons'

const Admin = () => {
  const [activeTab, setActiveTab] = useState('products')
  const [editingProduct, setEditingProduct] = useState(null)
  const [showProductForm, setShowProductForm] = useState(false)
  const [productForm, setProductForm] = useState({
    name: '', 
    name_kk: '', 
    description: '', 
    description_kk: '',
    price: '', 
    category: '', 
    category_kk: '',
    image: ''
  })
  const [telegramUser, setTelegramUser] = useState(null)
  const [isAuthorized, setIsAuthorized] = useState(false)

  const { products, loading: productsLoading, addProduct, updateProduct, deleteProduct } = useProducts()
  const { orders, updateOrderStatus } = useOrders()
  const { settings, saveSettings } = useSettings()

  const t = (key) => getTranslation('ru', key) // –ê–¥–º–∏–Ω–∫–∞ –≤—Å–µ–≥–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    const user = getTelegramUser()
    if (user) {
      setTelegramUser(user)
      if (isAdmin(user)) {
        setIsAuthorized(true)
      } else {
        alert('–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏')
        window.close()
      }
    } else {
      alert('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram')
      window.close()
    }
  }, [])

  const handleSaveProduct = async () => {
    if (!productForm.name || !productForm.price || !productForm.category) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (RU): –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ü–µ–Ω–∞, –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
      return
    }
    
    const productData = {
      name: productForm.name,
      name_kk: productForm.name_kk || productForm.name,
      description: productForm.description,
      description_kk: productForm.description_kk || productForm.description,
      price: parseFloat(productForm.price),
      category: productForm.category,
      category_kk: productForm.category_kk || productForm.category,
      image: productForm.image || 'https://images.unsplash.com/photo-1578985545062-69928b1d9587?w=400'
    }

    try {
      if (editingProduct) {
        await updateProduct(editingProduct.id, productData)
      } else {
        await addProduct(productData)
      }
      resetForm()
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error)
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞')
    }
  }

  const handleDeleteProduct = async (id) => {
    if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?')) {
      try {
        await deleteProduct(id)
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error)
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞')
      }
    }
  }

  const handleEditProduct = (product) => {
    setEditingProduct(product)
    setProductForm({
      name: product.name,
      name_kk: product.name_kk || '',
      description: product.description,
      description_kk: product.description_kk || '',
      price: product.price.toString(),
      category: product.category,
      category_kk: product.category_kk || '',
      image: product.image
    })
    setShowProductForm(true)
  }

  const resetForm = () => {
    setProductForm({ 
      name: '', 
      name_kk: '', 
      description: '', 
      description_kk: '',
      price: '', 
      category: '', 
      category_kk: '',
      image: '' 
    })
    setEditingProduct(null)
    setShowProductForm(false)
  }

  const sendStatusNotification = async (order, newStatus) => {
    if (!order.telegram_user_id) return

    try {
      let message = ''
      
      switch (newStatus) {
        case 'processing':
          message = `‚è≥ <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É! / –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ –æ—Ä—ã–Ω–¥–∞–ª—É–¥–∞!</b>\n\n`
          message += `üìã –ó–∞–∫–∞–∑ / –¢–∞–ø—Å—ã—Ä—ã—Å #${order.id.slice(-6)}\n`
          message += `–ú—ã –Ω–∞—á–∞–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. –°–∫–æ—Ä–æ –æ–Ω –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤! üë®‚Äçüç≥\n`
          message += `–¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑–¥—ã –¥–∞–π—ã–Ω–¥–∞—É–¥—ã –±–∞—Å—Ç–∞–¥—ã“õ. –ñ–∞“õ—ã–Ω–¥–∞ –¥–∞–π—ã–Ω –±–æ–ª–∞–¥—ã!`
          break
          
        case 'completed':
          message = `üéâ <b>–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤! / –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ –¥–∞–π—ã–Ω!</b>\n\n`
          message += `üìã –ó–∞–∫–∞–∑ / –¢–∞–ø—Å—ã—Ä—ã—Å #${order.id.slice(-6)}\n`
          message += `–ú–æ–∂–µ—Ç–µ –∑–∞–±–∏—Ä–∞—Ç—å –∏–ª–∏ –æ–∂–∏–¥–∞–π—Ç–µ –∫—É—Ä—å–µ—Ä–∞! üöó\n`
          message += `–ê–ª—ã–ø –∫–µ—Ç—É–≥–µ –±–æ–ª–∞–¥—ã –Ω–µ–º–µ—Å–µ –∫—É—Ä—å–µ—Ä–¥—ñ –∫“Ø—Ç—ñ“£—ñ–∑!\n\n`
          message += `–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! / –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑“ì–∞ —Ä–∞—Ö–º–µ—Ç! ‚ù§Ô∏è`
          break
          
        case 'cancelled':
          message = `‚ùå <b>–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω / –¢–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑ –∂–æ–π—ã–ª–¥—ã</b>\n\n`
          message += `üìã –ó–∞–∫–∞–∑ / –¢–∞–ø—Å—ã—Ä—ã—Å #${order.id.slice(-6)}\n`
          message += `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤–∞—à –∑–∞–∫–∞–∑. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è.\n`
          message += `”®–∫—ñ–Ω—ñ—à–∫–µ –æ—Ä–∞–π, —Ç–∞–ø—Å—ã—Ä—ã—Å—ã“£—ã–∑–¥—ã –æ—Ä—ã–Ω–¥–∞–π –∞–ª–º–∞–π–º—ã–∑. –ö–µ—à—ñ—Ä—ñ–º —Å“±—Ä–∞–π–º—ã–∑.\n\n`
          if (settings?.shop_phone) {
            message += `–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: ${settings.shop_phone}\n`
            message += `–°“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑ –±–æ–ª—Å–∞, –±—ñ–∑–±–µ–Ω —Ö–∞–±–∞—Ä–ª–∞—Å—ã“£—ã–∑: ${settings.shop_phone}`
          }
          break
          
        default:
          return
      }

      await sendNotification(order.telegram_user_id, message)
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É:', error)
    }
  }

  const handleUpdateOrderStatus = async (orderId, newStatus) => {
    try {
      const order = orders.find(o => o.id === orderId)
      if (!order) return

      await updateOrderStatus(orderId, newStatus)
      await sendStatusNotification(order, newStatus)

      const statusText = {
        'processing': '–≤ —Ä–∞–±–æ—Ç—É',
        'completed': '–≤—ã–ø–æ–ª–Ω–µ–Ω',
        'cancelled': '–æ—Ç–º–µ–Ω—ë–Ω'
      }
      
      alert(`‚úÖ –ó–∞–∫–∞–∑ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω –≤ —Å—Ç–∞—Ç—É—Å "${statusText[newStatus]}"\n${order.telegram_user_id ? '–ö–ª–∏–µ–Ω—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ üì±' : ''}`)

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error)
      alert('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞')
    }
  }

  const getStatusColor = (status) => {
    switch (status) {
      case 'new': return 'bg-blue-100 text-blue-800'
      case 'processing': return 'bg-yellow-100 text-yellow-800'
      case 'completed': return 'bg-green-100 text-green-800'
      case 'cancelled': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }

  const getStatusText = (status) => {
    switch (status) {
      case 'new': return '–ù–æ–≤—ã–π'
      case 'processing': return '–í —Ä–∞–±–æ—Ç–µ'
      case 'completed': return '–í—ã–ø–æ–ª–Ω–µ–Ω'
      case 'cancelled': return '–û—Ç–º–µ–Ω—ë–Ω'
      default: return status
    }
  }

  if (!isAuthorized) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto mb-4"></div>
          <p className="text-gray-600">–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞...</p>
        </div>
      </div>
    )
  }

  if (productsLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600 mx-auto"></div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 pb-20">
      <div className="bg-white shadow-sm">
        <div className="px-4 py-4">
          <h1 className="text-xl font-bold text-gray-800">–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</h1>
        </div>
        <div className="flex border-t">
          <button 
            onClick={() => setActiveTab('products')} 
            className={`flex-1 py-3 text-sm ${activeTab === 'products' ? 'border-b-2 border-indigo-600 text-indigo-600' : 'text-gray-500'}`}
          >
            –¢–æ–≤–∞—Ä—ã
          </button>
          <button 
            onClick={() => setActiveTab('orders')} 
            className={`flex-1 py-3 text-sm ${activeTab === 'orders' ? 'border-b-2 border-indigo-600 text-indigo-600' : 'text-gray-500'}`}
          >
            –ó–∞–∫–∞–∑—ã ({orders.length})
          </button>
          <button 
            onClick={() => setActiveTab('settings')} 
            className={`flex-1 py-3 text-sm ${activeTab === 'settings' ? 'border-b-2 border-indigo-600 text-indigo-600' : 'text-gray-500'}`}
          >
            ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </button>
        </div>
      </div>

      {activeTab === 'products' && (
        <div className="p-4">
          <button 
            onClick={() => setShowProductForm(true)} 
            className="w-full bg-indigo-600 text-white py-3 rounded-lg font-medium mb-4"
          >
            + –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä
          </button>
          <div className="space-y-3">
            {products.map(product => (
              <div key={product.id} className="bg-white rounded-lg p-4 shadow-sm">
                <div className="flex gap-3">
                  <img src={product.image} alt={product.name} className="w-20 h-20 object-cover rounded-lg" />
                  <div className="flex-1">
                    <h3 className="font-bold text-gray-800">{product.name}</h3>
                    {product.name_kk && (
                      <p className="text-sm text-gray-500">üá∞üáø {product.name_kk}</p>
                    )}
                    <p className="text-sm text-gray-600">{product.description}</p>
                    <div className="flex items-center justify-between mt-2">
                      <span className="font-bold text-indigo-600">{product.price} ‚Ç∏</span>
                      <span className="text-xs bg-gray-100 px-2 py-1 rounded">{product.category}</span>
                    </div>
                  </div>
                  <div className="flex flex-col gap-2">
                    <button 
                      onClick={() => handleEditProduct(product)} 
                      className="p-2 bg-blue-50 text-blue-600 rounded-lg"
                    >
                      <EditIcon />
                    </button>
                    <button 
                      onClick={() => handleDeleteProduct(product.id)} 
                      className="p-2 bg-red-50 text-red-600 rounded-lg"
                    >
                      <DeleteIcon />
                    </button>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {activeTab === 'orders' && (
        <div className="p-4">
          {orders.length === 0 ? (
            <div className="text-center py-12"><p className="text-gray-500">–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p></div>
          ) : (
            <div className="space-y-4">
              {orders.map(order => (
                <div key={order.id} className="bg-white rounded-lg p-4 shadow-sm">
                  <div className="flex items-start justify-between mb-3">
                    <div>
                      <p className="font-bold text-gray-800">–ó–∞–∫–∞–∑ #{order.id.slice(-6)}</p>
                      <p className="text-xs text-gray-500">{new Date(order.date).toLocaleString('ru-RU')}</p>
                    </div>
                    <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(order.status)}`}>
                      {getStatusText(order.status)}
                    </span>
                  </div>
                  
                  <div className="border-t pt-3 mb-3">
                    <p className="text-sm font-medium text-gray-700 mb-1">–ö–ª–∏–µ–Ω—Ç:</p>
                    <p className="text-sm text-gray-600">{order.customer_name}</p>
                    <p className="text-sm text-gray-600">{order.customer_phone}</p>
                    {order.telegram_username && (
                      <p className="text-sm text-blue-600">@{order.telegram_username}</p>
                    )}
                    {order.customer_comment && (
                      <p className="text-sm text-gray-600 mt-1 italic">{order.customer_comment}</p>
                    )}
                  </div>
                  
                  <div className="border-t pt-3 mb-3">
                    <p className="text-sm font-medium text-gray-700 mb-2">–¢–æ–≤–∞—Ä—ã:</p>
                    {order.items.map((item, idx) => (
                      <div key={idx} className="flex justify-between text-sm mb-1">
                        <span>{item.name} x{item.quantity}</span>
                        <span className="font-medium">{item.price * item.quantity} ‚Ç∏</span>
                      </div>
                    ))}
                    <div className="border-t mt-2 pt-2 flex justify-between font-bold">
                      <span>–ò—Ç–æ–≥–æ:</span>
                      <span className="text-indigo-600">{order.total} ‚Ç∏</span>
                    </div>
                  </div>
                  
                  <div className="flex gap-2">
                    <button
                      onClick={() => handleUpdateOrderStatus(order.id, 'processing')}
                      disabled={order.status === 'processing'}
                      className={`flex-1 py-2 rounded text-xs font-medium ${
                        order.status === 'processing' 
                          ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                          : 'bg-yellow-50 text-yellow-700 hover:bg-yellow-100'
                      }`}
                    >
                      ‚è≥ –í —Ä–∞–±–æ—Ç—É
                    </button>
                    <button
                      onClick={() => handleUpdateOrderStatus(order.id, 'completed')}
                      disabled={order.status === 'completed'}
                      className={`flex-1 py-2 rounded text-xs font-medium ${
                        order.status === 'completed'
                          ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                          : 'bg-green-50 text-green-700 hover:bg-green-100'
                      }`}
                    >
                      ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω
                    </button>
                    <button
                      onClick={() => handleUpdateOrderStatus(order.id, 'cancelled')}
                      disabled={order.status === 'cancelled'}
                      className={`flex-1 py-2 rounded text-xs font-medium ${
                        order.status === 'cancelled'
                          ? 'bg-gray-100 text-gray-400 cursor-not-allowed'
                          : 'bg-red-50 text-red-700 hover:bg-red-100'
                      }`}
                    >
                      ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {activeTab === 'settings' && (
        <div className="p-4">
          <div className="bg-white rounded-lg p-4 shadow-sm mb-4">
            <h3 className="font-bold text-lg mb-4">‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞</label>
                <input
                  type="text"
                  value={settings.shop_name}
                  onChange={(e) => saveSettings({...settings, shop_name: e.target.value})}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg"
                  placeholder="–ù–∞—à–∞ –ö–æ–Ω–¥–∏—Ç–µ—Ä—Å–∫–∞—è"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–¢–µ–ª–µ—Ñ–æ–Ω –∑–∞–≤–µ–¥–µ–Ω–∏—è</label>
                <input
                  type="text"
                  value={settings.shop_phone}
                  onChange={(e) => saveSettings({...settings, shop_phone: e.target.value})}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg"
                  placeholder="+7 (777) 123-45-67"
                />
                <p className="text-xs text-gray-500 mt-1">
                  –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –∫–ª–∏–µ–Ω—Ç–∞–º –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–õ–æ–≥–æ—Ç–∏–ø (URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)</label>
                <input
                  type="text"
                  value={settings.shop_logo}
                  onChange={(e) => saveSettings({...settings, shop_logo: e.target.value})}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg"
                  placeholder="https://..."
                />
                <p className="text-xs text-gray-500 mt-1">
                  –ë—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –≤ —à–∞–ø–∫–µ –≤–∏—Ç—Ä–∏–Ω—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: 100x100px –∏–ª–∏ 200x60px
                </p>
                {settings.shop_logo && (
                  <div className="mt-2 p-3 bg-gray-50 rounded-lg">
                    <p className="text-xs text-gray-600 mb-2">–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:</p>
                    <img 
                      src={settings.shop_logo} 
                      alt="–õ–æ–≥–æ—Ç–∏–ø" 
                      className="h-12 object-contain"
                      onError={(e) => e.target.style.display = 'none'}
                    />
                  </div>
                )}
              </div>

              <div className="border-t pt-4">
                <h4 className="font-bold text-md mb-3">üí≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–ø–ª–∞—Ç—ã Kaspi</h4>
                
                <div className="mb-3">
                  <label className="flex items-center gap-2">
                    <input
                      type="checkbox"
                      checked={settings.payment_enabled}
                      onChange={(e) => saveSettings({...settings, payment_enabled: e.target.checked})}
                      className="w-4 h-4"
                    />
                    <span className="text-sm">–í–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∫–≤–∏–∑–∏—Ç–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã</span>
                  </label>
                </div>

                {settings.payment_enabled && (
                  <>
                    <div className="mb-3">
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ Kaspi (–±–µ–∑ +7)
                      </label>
                      <input
                        type="text"
                        value={settings.kaspi_phone}
                        onChange={(e) => saveSettings({...settings, kaspi_phone: e.target.value})}
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg"
                        placeholder="7771234567"
                      />
                    </div>

                    <div className="mb-3">
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        –°—Å—ã–ª–∫–∞ –Ω–∞ Kaspi (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                      </label>
                      <input
                        type="text"
                        value={settings.kaspi_link}
                        onChange={(e) => saveSettings({...settings, kaspi_link: e.target.value})}
                        className="w-full px-4 py-2 border border-gray-300 rounded-lg"
                        placeholder="https://kaspi.kz/pay/..."
                      />
                    </div>
                  </>
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {showProductForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-end z-50">
          <div className="bg-white w-full rounded-t-2xl p-4 max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-bold">{editingProduct ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä' : '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'}</h2>
              <button onClick={resetForm} className="p-2 text-2xl">√ó</button>
            </div>
            
            <div className="bg-blue-50 p-3 rounded-lg mb-4">
              <p className="text-sm text-blue-800">
                <strong>üí° –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å:</strong><br/>
                –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –∏ –∫–∞–∑–∞—Ö—Å–∫–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ). –ï—Å–ª–∏ –∫–∞–∑–∞—Ö—Å–∫–∏–π –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç.
              </p>
            </div>

            <div className="space-y-4">
              <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="font-bold mb-3 text-gray-700">üá∑üá∫ –†—É—Å—Å–∫–∏–π (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</h3>
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ *</label>
                    <input 
                      type="text" 
                      value={productForm.name} 
                      onChange={(e) => setProductForm({...productForm, name: e.target.value})} 
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg" 
                      placeholder="–¢–æ—Ä—Ç –ù–∞–ø–æ–ª–µ–æ–Ω" 
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                    <textarea 
                      value={productForm.description} 
                      onChange={(e) => setProductForm({...productForm, description: e.target.value})} 
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg" 
                      rows="2" 
                      placeholder="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–æ—Ä—Ç —Å –∑–∞–≤–∞—Ä–Ω—ã–º –∫—Ä–µ–º–æ–º" 
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">–ö–∞—Ç–µ–≥–æ—Ä–∏—è *</label>
                    <input 
                      type="text" 
                      value={productForm.category} 
                      onChange={(e) => setProductForm({...productForm, category: e.target.value})} 
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg" 
                      placeholder="–¢–æ—Ä—Ç—ã" 
                    />
                  </div>
                </div>
              </div>

              <div className="bg-gray-50 p-4 rounded-lg">
                <h3 className="font-bold mb-3 text-gray-700">üá∞üáø “ö–∞–∑–∞“õ—à–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</h3>
                <div className="space-y-3">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">–ê—Ç–∞—É—ã</label>
                    <input 
                      type="text" 
                      value={productForm.name_kk} 
                      onChange={(e) => setProductForm({...productForm, name_kk: e.target.value})} 
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg" 
                      placeholder="–ù–∞–ø–æ–ª–µ–æ–Ω —Ç–æ—Ä—Ç—ã" 
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">–°–∏–ø–∞—Ç—Ç–∞–º–∞</label>
                    <textarea 
                      value={productForm.description_kk} 
                      onChange={(e) => setProductForm({...productForm, description_kk: e.target.value})} 
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg" 
                      rows="2" 
                      placeholder="–ö—ñ–ª–µ–≥–µ–π –∫—Ä–µ–º–¥—ñ –∫–ª–∞—Å—Å–∏–∫–∞–ª—ã“õ —Ç–æ—Ä—Ç" 
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">–°–∞–Ω–∞—Ç</label>
                    <input 
                      type="text" 
                      value={productForm.category_kk} 
                      onChange={(e) => setProductForm({...productForm, category_kk: e.target.value})} 
                      className="w-full px-4 py-2 border border-gray-300 rounded-lg" 
                      placeholder="–¢–æ—Ä—Ç—Ç–∞—Ä" 
                    />
                  </div>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">–¶–µ–Ω–∞ (‚Ç∏) *</label>
                <input 
                  type="number" 
                  value={productForm.price} 
                  onChange={(e) => setProductForm({...productForm, price: e.target.value})} 
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg" 
                  placeholder="2500" 
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</label>
                <input 
                  type="text" 
                  value={productForm.image} 
                  onChange={(e) => setProductForm({...productForm, image: e.target.value})} 
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg" 
                  placeholder="https://..." 
                />
              </div>
              
              <button 
                onClick={handleSaveProduct} 
                className="w-full bg-indigo-600 text-white py-3 rounded-lg font-medium"
              >
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}

export default Admin
